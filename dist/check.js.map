{"version":3,"sources":["../src/check.js"],"names":["checkPostAge","isoDate","unixDate","Date","replace","now","weightageForPost","postLength","parseInt","beautifyDate","fromNow"],"mappings":";;;;;;;AAAA;;AAKA;;;;;;AAEA,SAASA,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,MAAMC,WAAW,IAAIC,IAAJ,CACfF,QACGG,OADH,CACW,IADX,EACiB,GADjB,EAEGA,OAFH,CAEW,GAFX,EAEgB,GAFhB,EAGGA,OAHH,CAGW,GAHX,EAGgB,EAHhB,CADe,CAAjB;AAMA,SAAOD,KAAKE,GAAL,KAAaH,QAAb,yBAAP;AACD;;AAED,SAASI,gBAAT,CAA0BC,UAA1B,EAAsC;AACpC,MAAIA,kCAAJ,EAAgC;AAC9B;AACA,WAAO,KAAK,GAAZ;AACD,GAHD,MAGO,IAAIA,kCAAJ,EAAgC;AACrC;AACA,WAAOC,SACL,CAACD,kCAAD,KACG,6CADH,IAEE,EAFF,GAGE,GAJG,CAAP;AAMD,GARM,MAQA;AACL;AACA,WAAO,KAAK,GAAZ;AACD;AACF;;AAED,SAASE,YAAT,CAAsBR,OAAtB,EAA+B;AAC7B,MAAMC,WAAW,IAAIC,IAAJ,CACfF,QACGG,OADH,CACW,IADX,EACiB,GADjB,EAEGA,OAFH,CAEW,GAFX,EAEgB,GAFhB,EAGGA,OAHH,CAGW,GAHX,EAGgB,EAHhB,CADe,CAAjB;AAMA,SAAO,sBAAOF,QAAP,EAAiBQ,OAAjB,EAAP;AACD;;QAEQV,Y,GAAAA,Y;QAAcM,gB,GAAAA,gB;QAAkBG,Y,GAAAA,Y","file":"check.js","sourcesContent":["import {\n  maximumPostAge,\n  minimumLength,\n  optimumLength\n} from './config.json';\nimport moment from 'moment';\n\nfunction checkPostAge(isoDate) {\n  const unixDate = new Date(\n    isoDate\n      .replace(/-/g, '/')\n      .replace('T', ' ')\n      .replace('Z', '')\n  );\n  return Date.now() - unixDate > maximumPostAge;\n}\n\nfunction weightageForPost(postLength) {\n  if (postLength < minimumLength) {\n    // 10% VP\n    return 10 * 100;\n  } else if (postLength < optimumLength) {\n    // 10% ~ 80% VP\n    return parseInt(\n      (postLength - minimumLength) /\n        (optimumLength - minimumLength) *\n        80 *\n        100\n    );\n  } else {\n    // 80% VP\n    return 80 * 100;\n  }\n}\n\nfunction beautifyDate(isoDate) {\n  const unixDate = new Date(\n    isoDate\n      .replace(/-/g, '/')\n      .replace('T', ' ')\n      .replace('Z', '')\n  );\n  return moment(unixDate).fromNow();\n}\n\nexport { checkPostAge, weightageForPost, beautifyDate };\n"]}